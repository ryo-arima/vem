name: Release Packages

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  package:
    name: Build and Package (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            arch: aarch64
    outputs:
      version: ${{ steps.meta.outputs.version }}
      date: ${{ steps.meta.outputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install packaging deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends rpm fakeroot zip

      - name: Set up Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross
        run: |
          cargo install cross --locked || echo "cross already installed or failed; continuing"

      - name: Prepare metadata (version/date)
        id: meta
        run: |
          set -euo pipefail
          ver=$(grep -m1 '^version\s*=\s*"' Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "version=${ver}" >> "$GITHUB_OUTPUT"
          echo "date=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"

      - name: Build and package (${{ matrix.target }})
        env:
          TARGET: ${{ matrix.target }}
        run: |
          bash scripts/main.sh all

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.arch }}
          path: dist/**
          if-no-files-found: error

  release:
    name: Create Releases
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true

      - name: Prepare metadata
        id: meta
        run: |
          echo "version=${{ needs.package.outputs.version }}" >> $GITHUB_OUTPUT
          echo "date=${{ needs.package.outputs.date }}" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI (gh)
        run: bash scripts/packages/release/install_gh.sh

      - name: Create/Update releases via gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.meta.outputs.version }}
          DATE: ${{ steps.meta.outputs.date }}
        run: bash scripts/packages/release/publish_releases.sh